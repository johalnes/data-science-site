(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{127:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),i=(a(0),a(138)),b=a(145),c={id:"demo-py-code",title:"Single Premium - getting started (work in progress)"},o={id:"demo-py-code",title:"Single Premium - getting started (work in progress)",description:"<link",source:"@site/docs\\demo-py-code.mdx",permalink:"/data-science-site/docs/demo-py-code",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/demo-py-code.mdx",sidebar:"someSidebar",previous:{title:"Single Premium - introduction (work in progress)",permalink:"/data-science-site/docs/demo-py-intro"},next:{title:"test",permalink:"/data-science-site/docs/test"}},l=[{value:"Exploratory data analysis",id:"exploratory-data-analysis",children:[]},{value:"Using notebook",id:"using-notebook",children:[{value:"Importing data",id:"importing-data",children:[]},{value:"Manipulate data",id:"manipulate-data",children:[]}]},{value:"From notebook to python script",id:"from-notebook-to-python-script",children:[{value:"Convert notebook",id:"convert-notebook",children:[]},{value:"Refactoring",id:"refactoring",children:[]},{value:"Database and pipeline",id:"database-and-pipeline",children:[]}]}],d={rightToc:l};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("link",{rel:"stylesheet",href:"https://cdn.jsdelivr.net/npm/katex@0.11.0/dist/katex.min.css",integrity:"sha384-BdGj8xC2eZkQaxoQ8nSLefg4AV4/AwB3Fj+8SUSo7pnKP6Eoy18liIKTPn9oBYNG",crossOrigin:"anonymous"}),Object(i.b)("h3",{id:"exploratory-data-analysis"},"Exploratory data analysis"),Object(i.b)("p",null,"The next step is to place all given data in the data - raw folder(",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/johalnes/demo_single_premium/blob/1-data-overview/data/raw/policy_data.xlsx?raw=true"}),"test data"),") This is where all input data goes, and should never be directly manipulated.\nNo files from this folder will go into github, both for security and possible large files. Edit the .gitignore files to version controll data."),Object(i.b)("p",null,"Jupyter Notebooks are always a nice place to start with testing. Both to get a feel of the data and quickly build and test functions.\nEither open the folder in VS Code and install the jupyter plugin, or open commandline, cd into project folder and type ",Object(i.b)("inlineCode",{parentName:"p"},"jupyter notebook"),"."),Object(i.b)("p",null,"By opening the example.ipynb from the Notebooks folder, we see that the template comes with the default folder structure, which makes import data easy.\nUncomment pandas and numpy, and use pandas to read the excelfile:"),Object(i.b)("h2",{id:"using-notebook"},"Using notebook"),Object(i.b)("p",null,"Sketch notebook to get a feel of data and what need to be treated in order to be efficient in a modelling process. Notebooks and other files can be found at ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/johalnes/demo_single_premium/tree/master/notebooks"}),"GitHub")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"# Standard python packages\nimport os\nimport sys\n\n# Other package imports\nimport numpy as np\nimport pandas as pd\n# from matplotlib import pyplot as plt\n")),Object(i.b)("p",null,"Setup some global settings and configuration. It's good practice to use os.path.join instead of a string. This makes sure the code runs in both Windows and Unix environments. "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"project_root = os.path.abspath(os.path.join(os.getcwd(), os.pardir))\ndata_folder = os.path.join(project_root, 'data')\ndata_folder_raw = os.path.join(data_folder, 'raw')\nsrc_folder = os.path.join(project_root, 'src')\n")),Object(i.b)("h3",{id:"importing-data"},"Importing data"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"filename='policy_data.xlsx'\ndf=pd.read_excel(os.path.join(data_folder_raw,filename))\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"print(df.head().to_markdown())\n")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"birth_day"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"gender"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"interest_rate"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"A6499"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"A6799"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1975-03-27 04:53:04"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"M"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"15493"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"16955")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"1"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1971-06-12 01:40:07"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"M"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"16338"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"11844")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"2"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1976-08-09 17:48:01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"F"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"21876"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"14831")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"3"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1971-08-02 19:49:17"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"F"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.04"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"13469"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"22145")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"4"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1973-05-17 17:45:32"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"M"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"23608"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"12370")))),Object(i.b)("p",null,"As we can see, the excelsheet contains birth day, gender and interest rate. The last two columns are the calculated premium intensity with coverage (here A for Alderspensjon/Age pension), contract start age and stop age. To more easily be able to calculate something from this data we need the data on flat format."),Object(i.b)("h3",{id:"manipulate-data"},"Manipulate data"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"df=df.drop('Unnamed: 0', axis=1)\ndf_flat=df.melt(id_vars = df.columns[:3], value_vars=['A6499','A6799'], var_name='Coverage',value_name='Premium')\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"print(df_flat.head().to_markdown())\n")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"birth_day"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"gender"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"interest_rate"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Coverage"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"Premium"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1975-03-27 04:53:04"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"M"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A6499"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"15493")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"1"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1971-06-12 01:40:07"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"M"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A6499"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"16338")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"2"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1976-08-09 17:48:01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"F"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A6499"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"21876")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"3"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1971-08-02 19:49:17"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"F"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.04"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A6499"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"13469")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"4"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1973-05-17 17:45:32"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"M"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A6499"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"23608")))),Object(i.b)("p",null,"This can be easily ploted and we see (since this is mock up data) that the premium is splitted 50/50 on the two coverages"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"df_flat.groupby('Coverage')['Premium'].count().plot.bar(x='Coverage', y='Premium', stacked=True)\n")),Object(i.b)("img",{alt:"Distribution of policies",src:Object(b.a)("img/demo/1-sketch-notebook_13_1.svg")}),Object(i.b)("p",null,"Now we need the min and max age from the coverage column"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"df_flat['min_age'] = df_flat['Coverage'].str[1:3]\ndf_flat['max_age'] = df_flat['Coverage'].str[3:5]\nprint(df_flat.head().to_markdown())\n")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"birth_day"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"gender"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"interest_rate"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Coverage"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"Premium"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"min_age"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"max_age"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1975-03-27 04:53:04"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"M"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A6499"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"15493"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"64"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"99")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"1"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1971-06-12 01:40:07"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"M"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A6499"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"16338"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"64"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"99")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"2"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1976-08-09 17:48:01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"F"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A6499"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"21876"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"64"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"99")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"3"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1971-08-02 19:49:17"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"F"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.04"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A6499"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"13469"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"64"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"99")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"4"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"1973-05-17 17:45:32"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"M"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0.01"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"A6499"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"23608"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"64"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"99")))),Object(i.b)("p",null,"The data is now in a form that is nice to work with and have all the data we need. Let's start with the actual model!"),Object(i.b)("h2",{id:"from-notebook-to-python-script"},"From notebook to python script"),Object(i.b)("h3",{id:"convert-notebook"},"Convert notebook"),Object(i.b)("p",null,"As stated above, Notebooks are easy and convenient in a exploratory phase, but not as easy to version control and make reusable.\nFor this one should convert to notebook to a regular python script. A good starting point is to convert the notebook to script.\nEither by running nbconvert command directly ",Object(i.b)("inlineCode",{parentName:"p"},"!jupyter nbconvert --to script 1-sketch-notebook.ipynb --output ./../src/singlepremium/data_prepp.py")),Object(i.b)("p",null,"or by choosing export notebook from file menu and rename the file to data_prepp.py within the src - singlepremium folder :"),Object(i.b)("img",{alt:"Distribution of policies",src:Object(b.a)("img/demo/demo-code-export.PNG")}),Object(i.b)("h3",{id:"refactoring"},"Refactoring"),Object(i.b)("p",null,"Typically one start with refactoring and see what typically changes or should be able to parameterize in order to automate the process."),Object(i.b)("p",null,"For this demo we split in normal extract, transform and load mindset, even if it's somewhat overkill. Firstly just what we made above:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"\nimport os\nimport sys\nimport numpy as np\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\ndef extract_data(filepath, filename='policy_data.xlsx'):\n\n    df=pd.read_excel(os.path.join(filepath,filename))\n    return df\n\ndef manipulate_data(data):\n    data=data.drop('Unnamed: 0', axis=1)\n    df_flat=data.melt(id_vars = df.columns[:3], value_vars=['A6499','A6799'], var_name='Coverage',value_name='Premium')\n    df_flat['min_age'] = df_flat['Coverage'].str[1:3]\n    df_flat['max_age'] = df_flat['Coverage'].str[3:5]\n\n    return df_flat\n")),Object(i.b)("h3",{id:"database-and-pipeline"},"Database and pipeline"),Object(i.b)("p",null,"Then a regular process usually loads this to a database. For this and connect this to a flow we would need some addidtional code: "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"#Establishing a database connection, this will be created if it doesn't exist\ndef create_connection(file_path):\n    \n    engine = create_engine(f'sqlite:///{file_path}/single_premium_data.db', \n                           connect_args={'detect_types': sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES},\n                           native_datetime=True)\n\n    return engine\n\ndef insert_in_database(df, filename,engine, calculation_period = (dt.datetime.today() + pd.offsets.MonthEnd(-1)).strftime(\"%Y-%m\")):\n    \n    #Needed to delete from sql database correctly\n    df['calculation_period'] = calculation_period\n    df['filename'] = filename\n    \n    #Making sure to remove possible duplicates\n    delete_sql = f\"delete from SINGLE_PREMIUM_DATA where filename = '{filename}' and calculation_period = '{calculation_period}'\"\n    engine.connect().execute(delete_sql)\n\n    #Appending instead of deliting table, which is safe combined with delete statement above\n    df.to_sql('SINGLE_PREMIUM_DATA',engine,if_exists='append', index=False)\n    print('inserted {} rows into SINGLE_PREMIUM_DATA from file:{}'.format(df.shape[0], filename))\n\nif __name__ == \"__main__\":\n\n    project_root = os.path.abspath(os.path.join(os.getcwd(), os.pardir))\n    data_folder = os.path.join(project_root, 'data')\n    data_folder_raw = os.path.join(data_folder, 'raw')\n    data_folder_processed = os.path.join(data_folder, 'processed')\n\n    filename='policy_data.xlsx'\n\n    engine = create_connection(data_folder_processed)\n    data = extract_data(data_raw, filename)\n    data_prepped =  manipulate_data(data_prepped)\n    insert_in_database(data_prepped, filename, engine)\n    \n    \n")),Object(i.b)("p",null,"Now one can easily make this reusable. For instance in order to insert all excel files in folder by just addin two lines:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"    for filename in os.listdir(data_raw):\n        if filename.endswith('.xlsx'):\n            engine = create_connection(data_folder_processed)\n            data = extract_data(data_raw, filename)\n            data_prepped =  manipulate_data(data_prepped)\n            insert_in_database(data_prepped, filename, engine)\n    \n")),Object(i.b)("p",null,"or make it scheduled and make it a ETL process by using ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.prefect.io/core/tutorial/02-etl-flow.html"}),"Prefect"),", or make it run by an file event in teams, onedrive or similar with ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://azure.microsoft.com/nb-no/services/functions/#features"}),"Azure functions"),"."))}p.isMDXComponent=!0},138:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return j}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),d=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=d(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,b=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=d(a),m=n,j=p["".concat(b,".").concat(m)]||p[m]||s[m]||i;return a?r.a.createElement(j,c(c({ref:t},l),{},{components:a})):r.a.createElement(j,c({ref:t},l))}));function j(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,b=new Array(i);b[0]=m;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:n,b[1]=c;for(var l=2;l<i;l++)b[l]=a[l];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},139:function(e,t,a){"use strict";var n=a(0),r=a(34);t.a=function(){return Object(n.useContext)(r.a)}},145:function(e,t,a){"use strict";a.d(t,"a",(function(){return r}));var n=a(139);function r(e){const{siteConfig:t}=Object(n.a)(),{baseUrl:a="/"}=t||{};if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?a+e.slice(1):a+e}}}]);